import requests
import random
import os
import numpy as np
import pandas as pd

import seaborn as sns
import plotly.express as px 
import matplotlib.pyplot as plt
%matplotlib inline

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA
from sklearn.metrics import euclidean_distances
from scipy.spatial.distance import cdist

import warnings
warnings.filterwarnings("ignore")


#read data
data = pd.read_csv('data.csv.zip')
genre_data = pd.read_csv('data_by_genres.csv')
year_data = pd.read_csv('data_by_year.csv')


print(data.info())

print(year_data.info())

print(genre_data.info())

#Using the data grouped by year, we can understand how the overall sound of music has changed from 1921 to 2020.
def get_decade(year):
    period_start = int(year/10) * 10
    decade = '{}s'.format(period_start)
    return decade

data['decade'] = data['year'].apply(get_decade)

sns.set(rc={'figure.figsize':(11 ,6)})
sns.countplot(data['decade'])

sound_features = ['acousticness', 'danceability', 'energy', 'instrumentalness', 'liveness', 'valence']
fig = px.line(year_data, x='year', y=sound_features)
fig.show()

top10_genres = genre_data.nlargest(10, 'popularity')

fig = px.bar(top10_genres, x='genres', y=['valence', 'energy', 'danceability', 'acousticness'], barmode='group')
fig.show()

#Clustering Genres with K-Means
#the simple K-means clustering algorithm is used to divide the genres in this dataset into ten clusters based on the numerical audio features of each genres.

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

cluster_pipeline = Pipeline([('scaler', StandardScaler()), ('kmeans', KMeans(n_clusters=10))])
X = genre_data.select_dtypes(np.number)
cluster_pipeline.fit(X)
genre_data['cluster'] = cluster_pipeline.predict(X)

from sklearn.manifold import TSNE

tsne_pipeline = Pipeline([('scaler', StandardScaler()), ('tsne', TSNE(n_components=2, verbose=1))])
genre_embedding = tsne_pipeline.fit_transform(X)
projection = pd.DataFrame(columns=['x', 'y'], data=genre_embedding)
projection['genres'] = genre_data['genres']
projection['cluster'] = genre_data['cluster']

fig = px.scatter(projection, x='x', y='y', color='cluster', hover_data=['x', 'y', 'genres'])
fig.show()

song_cluster_pipeline = Pipeline([('scaler', StandardScaler()), 
                                  ('kmeans', KMeans(n_clusters=20, 
                                   verbose=False))
                                 ], verbose=False)
X = data.select_dtypes(np.number)
number_cols = list(X.columns)
song_cluster_pipeline.fit(X)
song_cluster_labels = song_cluster_pipeline.predict(X)
data['cluster_label'] = song_cluster_labels

from sklearn.decomposition import PCA

pca_pipeline = Pipeline([('scaler', StandardScaler()), ('PCA', PCA(n_components=2))])
song_embedding = pca_pipeline.fit_transform(X)
projection = pd.DataFrame(columns=['x', 'y'], data=song_embedding)
projection['title'] = data['name']
projection['cluster'] = data['cluster_label']
fig = px.scatter(
    projection, x='x', y='y', color='cluster', hover_data=['x', 'y', 'title'])
fig.show()

!pip install spotipy


import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from collections import defaultdict
client_id = "4080e5e8645246998df95e5627535505"
client_secret = "d684d03bb7424e5ea37b50c36fcd888c"

def get_access_token(client_id, client_secret):
    auth_url = "https://accounts.spotify.com/api/token"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
    }
    data = {
        "grant_type": "client_credentials",
    }
    response = requests.post(auth_url, headers=headers, auth=(client_id, client_secret), data=data)
    if response.status_code == 200:
        token_data = response.json()
        access_token = token_data["access_token"]
        return access_token
    else:
        # Handle authentication error cases
        return None

def fetch_songs(access_token, mood):
    search_url = "https://api.spotify.com/v1/search"
    headers = {
        "Authorization": "Bearer " + access_token,
    }
    params = {
        "q": mood,
        "type": "track",
        "limit": 20,
    }
    response = requests.get(search_url, headers=headers, params=params)
    if response.status_code == 200:
        data = response.json()
        songs = data["tracks"]["items"]
        return songs
    else:
        
        return []

#recommend songs based on users's choice
def recommend_songs(mood, num_songs=20):
    access_token = get_access_token(client_id, client_secret)
    if access_token:
        songs = fetch_songs(access_token, mood)
        if songs:
            num_songs = min(num_songs, len(songs))  # Ensure we don't exceed the available number of songs
            recommendations = []
            for _ in range(num_songs):
                song = random.choice(songs)
                song_name = song["name"]
                artist_name = song["artists"][0]["name"]
                recommendations.append(f"{song_name} by {artist_name}")
                songs.remove(song)  # Remove the selected song from the list to avoid duplicates
            return recommendations
        else:
            return ["I'm sorry, I couldn't find any songs matching your preference."]
    else:
        return ["Failed to authenticate with Spotify API."]

#chatbot
while True:
    user_input = input("User: ")
    
    # Check for different user inputs and respond accordingly
    if user_input.lower() in ["hello", "hi", "hey"]:
        print("ChatBot: Hello! How can I assist you?")
    elif "suggest me some songs" in user_input:
        print("ChatBot: What type of music are you in the mood for?")
    elif "okay,thanks" in user_input.lower():
        print("ChatBot:Welcome!")
        break
    else:
        song_recommendations = recommend_songs(user_input, num_songs=10)
        print("ChatBot: Here are some song recommendations:")
        for recommendation in song_recommendations:
            print(" - " + recommendation)







  



